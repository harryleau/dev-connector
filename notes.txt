////////// USING PASSPORT - JWT
1. install passport, passport-jwt to use jwt strategy
2. use jwt in users/login route to sign the token for access to private routes
3. initialize passport and add config through a config file.
4. In config file, if opts array (secretOrKey,jwtFromRequest) is passed correctly, it will return the payload of user data (jwt_payload)
5. Then, we can add middleware function of passport to routes that need authentication.
6. To test it out, use postman, fill in email and password, pass token into the Authorization in request Headers.

////////// SET UP REACT
1. install globally create-react-app and run 'create-react-app client' command to create a client directory using react (no need to use webpack to set up react from scratch).
2. add "proxy" : "http://localhost:5000" to package.json so that when fetching api, we only use 'axios.get('/api')'.
3. install concurrently to run 2 command for react and back-end at the same time
4. set up scripts for installing client modules and run client. 
    - "npm install --prefix client" equals "cd client && npm install" -> a command from app root to go to client directory and install npm package.
5. set up a script like "dev" to run server and client concurrently. 
6. install all react related modules in client folder, not app root.



/////////// DEPLOY
- set static entry point to client/build/index.html
- create a heroku postbuild script

=> we dont have a dev server or react server on heroku, we need to point to the build dir and index.html (in sever.js)
=> we dont run any build command in heroku push because we want to build it in heroku server => use heroku postbuild, we have to set the NPM_CONFIG_PRODUCTION=false to be able to install the devDependencies.